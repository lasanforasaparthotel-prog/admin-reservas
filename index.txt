<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestor de Reservas Duplex</title>
    <!-- Tailwind CSS para un diseño moderno y adaptable -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Biblioteca de íconos para botones -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <style>
        /* Estilos personalizados para mejorar la apariencia */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5; /* Un fondo suave */
        }
        .card {
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 4px
 12px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        .card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
        }
        .btn {
            transition: all 0.2s ease-in-out;
        }
        .btn:hover {
            transform: scale(1.05);
        }
        /* Estilo para el indicador de carga */
        #loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            position: absolute;
            top: 50%;
            left: 50%;
            margin-left: -20px;
            margin-top: -20px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        /* Estilos para el modal de confirmación */
        .modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .modal-content {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            width: 90%;
            max-width: 400px;
            text-align: center;
        }
        /* Estilos para los botones de filtro */
        .filter-btn {
            background-color: transparent;
            color: #4a5568; /* gray-700 */
        }
        .active-filter {
            background-color: #3b82f6; /* blue-500 */
            color: white;
            box-shadow: 0 2px 8px rgba(59, 130, 246, 0.4);
        }
    </style>
</head>
<body class="antialiased text-gray-800">

    <div id="app" class="container mx-auto p-4 md:p-8 max-w-5xl">
        
        <header class="text-center mb-8">
            <h1 class="text-4xl md:text-5xl font-bold text-gray-900">Gestor de Reservas Dúplex</h1>
            <p class="text-lg text-gray-600 mt-2">Administra las estadías de tus clientes de forma detallada.</p>
        </header>

        <!-- Formulario para agregar nuevas reservas -->
        <div class="card p-6 md:p-8 mb-8">
            <h2 class="text-2xl font-semibold mb-6">Agregar Reserva</h2>
            <form id="reservation-form" class="space-y-6">
                <!-- Campo oculto para el ID de la reserva en modo edición -->
                <input type="hidden" id="edit-id">
                
                <!-- Selección de Dúplex, Nombre Cliente y Cantidad de Personas -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Dúplex</label>
                        <div class="flex items-center space-x-4">
                           <label><input type="radio" name="duplex" value="Duplex 2" class="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300" checked> Dúplex 2</label>
                           <label><input type="radio" name="duplex" value="Duplex 3" class="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300"> Dúplex 3</label>
                        </div>
                    </div>
                    <div>
                        <label for="client-name" class="block text-sm font-medium text-gray-700 mb-1">Nombre del Cliente</label>
                        <input type="text" id="client-name" placeholder="Ej: Ana Pérez" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition" required>
                    </div>
                     <div>
                        <label for="person-count" class="block text-sm font-medium text-gray-700 mb-1">Cantidad de Personas</label>
                        <input type="number" id="person-count" placeholder="Ej: 4" min="1" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition" required>
                    </div>
                </div>

                <!-- Rango de Fechas -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 items-end">
                    <div>
                        <label for="check-in-date" class="block text-sm font-medium text-gray-700 mb-1">Fecha Check-in (desde 12:00 hs)</label>
                        <input type="date" id="check-in-date" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition" required>
                    </div>
                    <div>
                        <label for="check-out-date" class="block text-sm font-medium text-gray-700 mb-1">Fecha Check-out (hasta 09:00 hs)</label>
                        <input type="date" id="check-out-date" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition" required>
                    </div>
                </div>
                 <div class="flex items-center">
                    <input id="late-checkout" type="checkbox" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                    <label for="late-checkout" class="ml-2 block text-sm text-gray-900">Extensión horaria hasta las 18:00 hs</label>
                </div>

                <!-- Detalles de la Estadía -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                     <div>
                        <label for="total-nights" class="block text-sm font-medium text-gray-700 mb-1">Total Noches</label>
                        <input type="number" id="total-nights" class="w-full px-4 py-2 border border-gray-300 rounded-lg bg-gray-100" readonly>
                    </div>
                    <div>
                        <label for="total-stay" class="block text-sm font-medium text-gray-700 mb-1">Total Estadía ($)</label>
                        <input type="number" id="total-stay" placeholder="Ej: 50000" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                    </div>
                </div>

                <!-- Opciones Adicionales -->
                 <div class="grid grid-cols-2 md:grid-cols-4 gap-4 pt-4 border-t">
                    <div class="flex items-center"><input id="promo" type="checkbox" class="h-4 w-4 text-blue-600 rounded"><label for="promo" class="ml-2 text-sm">Promo</label></div>
                    <div class="flex items-center"><input id="sheets" type="checkbox" class="h-4 w-4 text-blue-600 rounded"><label for="sheets" class="ml-2 text-sm">Sábanas</label></div>
                    <div class="flex items-center"><input id="car" type="checkbox" class="h-4 w-4 text-blue-600 rounded"><label for="car" class="ml-2 text-sm">Auto</label></div>
                    <div class="flex items-center"><input id="extra-beds" type="checkbox" class="h-4 w-4 text-blue-600 rounded"><label for="extra-beds" class="ml-2 text-sm">Camas de más</label></div>
                </div>

                <!-- Extras y Otros -->
                 <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label for="extras" class="block text-sm font-medium text-gray-700 mb-1">Extras ($)</label>
                        <input type="number" id="extras" placeholder="Ej: 1500" class="w-full px-4 py-2 border border-gray-300 rounded-lg">
                    </div>
                    <div>
                         <label for="others" class="block text-sm font-medium text-gray-700 mb-1">Otros...</label>
                        <textarea id="others" placeholder="Notas adicionales sobre la reserva" rows="1" class="w-full px-4 py-2 border border-gray-300 rounded-lg"></textarea>
                    </div>
                </div>

                <div class="text-right space-x-4">
                    <button type="button" id="cancel-edit-btn" class="btn bg-gray-500 text-white font-semibold py-2 px-6 rounded-lg shadow-md hover:bg-gray-600 hidden">
                        Cancelar Edición
                    </button>
                    <button type="submit" id="submit-btn" class="btn bg-blue-600 text-white font-semibold py-2 px-6 rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        <i class="fas fa-plus-circle mr-2"></i>Agregar Reserva
                    </button>
                </div>
            </form>
        </div>
        
        <!-- Filtros de vista -->
        <div class="mb-6 flex justify-center space-x-2 md:space-x-4 bg-white p-2 rounded-xl shadow-sm">
            <button id="filter-all" class="filter-btn active-filter flex-1 text-center py-2 px-4 rounded-lg font-semibold transition">Todas</button>
            <button id="filter-d2" class="filter-btn flex-1 text-center py-2 px-4 rounded-lg font-semibold transition">Dúplex 2</button>
            <button id="filter-d3" class="filter-btn flex-1 text-center py-2 px-4 rounded-lg font-semibold transition">Dúplex 3</button>
        </div>

        <!-- Sección para mostrar las reservas -->
        <div>
            <h2 class="text-2xl font-semibold mb-6">Reservas Activas</h2>
            <div id="loader"></div>
            <div id="reservations-list" class="space-y-4">
                <p id="no-reservations" class="text-center text-gray-500 py-8 hidden">Aún no tienes reservas registradas.</p>
            </div>
        </div>

    </div>
    
    <!-- Modal de confirmación (oculto por defecto) -->
    <div id="confirmation-modal" class="modal-backdrop hidden">
        <div class="modal-content">
            <h3 class="text-lg font-bold mb-4" id="modal-title">Confirmar Acción</h3>
            <p id="modal-message" class="mb-6">¿Estás seguro de que quieres continuar?</p>
            <div class="flex justify-center gap-4">
                <button id="modal-cancel-btn" class="btn bg-gray-300 text-gray-800 font-semibold py-2 px-6 rounded-lg">Cancelar</button>
                <button id="modal-confirm-btn" class="btn bg-red-500 text-white font-semibold py-2 px-6 rounded-lg">Confirmar</button>
            </div>
        </div>
    </div>


    <!-- Script para la lógica de Firebase -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, doc, deleteDoc, query, serverTimestamp, updateDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        const auth = getAuth(app);
        
        // Elementos del DOM
        const reservationForm = document.getElementById('reservation-form');
        const checkInDateInput = document.getElementById('check-in-date');
        const checkOutDateInput = document.getElementById('check-out-date');
        const totalNightsInput = document.getElementById('total-nights');
        const reservationsList = document.getElementById('reservations-list');
        const loader = document.getElementById('loader');
        const noReservationsMessage = document.getElementById('no-reservations');
        const modal = document.getElementById('confirmation-modal');
        const modalConfirmBtn = document.getElementById('modal-confirm-btn');
        const modalCancelBtn = document.getElementById('modal-cancel-btn');
        const editIdInput = document.getElementById('edit-id');
        const submitBtn = document.getElementById('submit-btn');
        const cancelEditBtn = document.getElementById('cancel-edit-btn');
        const filterAllBtn = document.getElementById('filter-all');
        const filterD2Btn = document.getElementById('filter-d2');
        const filterD3Btn = document.getElementById('filter-d3');

        // Estado de la aplicación
        let allReservations = [];
        let currentFilter = 'all';
        let confirmCallback = null;

        // --- Lógica de la Interfaz ---

        function calculateNights() {
            const checkIn = new Date(checkInDateInput.value);
            const checkOut = new Date(checkOutDateInput.value);
            if (checkInDateInput.value && checkOutDateInput.value && checkOut > checkIn) {
                const timeDiff = checkOut.getTime() - checkIn.getTime();
                const diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                totalNightsInput.value = diffDays;
            } else {
                totalNightsInput.value = 0;
            }
        }
        
        function showConfirmationModal(message, callback) {
            document.getElementById('modal-message').textContent = message;
            modal.classList.remove('hidden');
            modalConfirmBtn.classList.remove('hidden');
            confirmCallback = callback;
        }

        function resetForm() {
            reservationForm.reset();
            editIdInput.value = '';
            submitBtn.innerHTML = '<i class="fas fa-plus-circle mr-2"></i>Agregar Reserva';
            submitBtn.classList.remove('bg-green-600', 'hover:bg-green-700');
            submitBtn.classList.add('bg-blue-600', 'hover:bg-blue-700');
            cancelEditBtn.classList.add('hidden');
            document.querySelector('.card h2').textContent = 'Agregar Reserva';
            calculateNights();
        }

        function populateFormForEdit(id) {
            const reservation = allReservations.find(res => res.id === id);
            if (!reservation) return;

            editIdInput.value = id;
            document.querySelector(`input[name="duplex"][value="${reservation.duplex}"]`).checked = true;
            document.getElementById('client-name').value = reservation.clientName;
            document.getElementById('person-count').value = reservation.personCount;
            document.getElementById('check-in-date').value = reservation.checkInDate;
            document.getElementById('check-out-date').value = reservation.checkOutDate;
            document.getElementById('late-checkout').checked = reservation.lateCheckout;
            document.getElementById('total-stay').value = reservation.totalStayCost;
            document.getElementById('promo').checked = reservation.promo;
            document.getElementById('sheets').checked = reservation.sheets;
            document.getElementById('car').checked = reservation.car;
            document.getElementById('extra-beds').checked = reservation.extraBeds;
            document.getElementById('extras').value = reservation.extrasCost;
            document.getElementById('others').value = reservation.otherNotes;
            
            calculateNights();

            submitBtn.innerHTML = '<i class="fas fa-save mr-2"></i>Actualizar Reserva';
            submitBtn.classList.remove('bg-blue-600', 'hover:bg-blue-700');
            submitBtn.classList.add('bg-green-600', 'hover:bg-green-700');
            cancelEditBtn.classList.remove('hidden');
            document.querySelector('.card h2').textContent = 'Editar Reserva';
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        function updateFilterButtons() {
            document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active-filter'));
            if (currentFilter === 'all') filterAllBtn.classList.add('active-filter');
            if (currentFilter === 'Duplex 2') filterD2Btn.classList.add('active-filter');
            if (currentFilter === 'Duplex 3') filterD3Btn.classList.add('active-filter');
        }

        function applyFilterAndDisplay() {
            let filteredReservations = allReservations;
            if (currentFilter !== 'all') {
                filteredReservations = allReservations.filter(res => res.duplex === currentFilter);
            }
            displayReservations(filteredReservations);
        }
        
        // --- Event Listeners ---
        checkInDateInput.addEventListener('change', calculateNights);
        checkOutDateInput.addEventListener('change', calculateNights);
        modalCancelBtn.addEventListener('click', () => modal.classList.add('hidden'));
        modalConfirmBtn.addEventListener('click', () => {
            if (confirmCallback) confirmCallback();
            modal.classList.add('hidden');
        });
        cancelEditBtn.addEventListener('click', resetForm);
        filterAllBtn.addEventListener('click', () => { currentFilter = 'all'; updateFilterButtons(); applyFilterAndDisplay(); });
        filterD2Btn.addEventListener('click', () => { currentFilter = 'Duplex 2'; updateFilterButtons(); applyFilterAndDisplay(); });
        filterD3Btn.addEventListener('click', () => { currentFilter = 'Duplex 3'; updateFilterButtons(); applyFilterAndDisplay(); });


        // --- Lógica de Firebase ---
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                const userId = user.uid;
                const reservationsCol = collection(db, `/artifacts/${appId}/users/${userId}/reservations`);
                listenForReservations(reservationsCol);
                reservationForm.addEventListener('submit', (e) => {
                    e.preventDefault();
                    addOrUpdateReservation(reservationsCol);
                });
            } else {
                console.log("Usuario no autenticado. Intentando iniciar sesión...");
            }
        });

        (async () => {
            try {
                if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                    await signInWithCustomToken(auth, __initial_auth_token);
                } else {
                    await signInAnonymously(auth);
                }
            } catch (error) { console.error("Error de autenticación:", error); }
        })();

        async function addOrUpdateReservation(reservationsCol) {
            const reservationData = {
                duplex: document.querySelector('input[name="duplex"]:checked').value,
                clientName: document.getElementById('client-name').value.trim(),
                personCount: parseInt(document.getElementById('person-count').value) || 1,
                checkInDate: checkInDateInput.value,
                checkOutDate: checkOutDateInput.value,
                lateCheckout: document.getElementById('late-checkout').checked,
                totalNights: parseInt(totalNightsInput.value) || 0,
                totalStayCost: parseFloat(document.getElementById('total-stay').value) || 0,
                promo: document.getElementById('promo').checked,
                sheets: document.getElementById('sheets').checked,
                car: document.getElementById('car').checked,
                extraBeds: document.getElementById('extra-beds').checked,
                extrasCost: parseFloat(document.getElementById('extras').value) || 0,
                otherNotes: document.getElementById('others').value.trim(),
            };
            
            if (!reservationData.clientName || !reservationData.checkInDate || !reservationData.checkOutDate || !reservationData.personCount) {
                 showConfirmationModal("Por favor, completa nombre, personas, check-in y check-out.", () => {});
                 modalConfirmBtn.classList.add('hidden');
                 return;
            }

            const editId = editIdInput.value;
            try {
                if (editId) {
                    const docRef = doc(db, reservationsCol.path, editId);
                    await updateDoc(docRef, reservationData);
                } else {
                    await addDoc(reservationsCol, { ...reservationData, createdAt: serverTimestamp() });
                }
                resetForm();
            } catch (error) { console.error("Error al guardar la reserva: ", error); }
        }

        function listenForReservations(reservationsCol) {
            onSnapshot(query(reservationsCol), (snapshot) => {
                loader.style.display = 'none';
                allReservations = snapshot.docs
                    .map(doc => ({ id: doc.id, ...doc.data() }))
                    .sort((a, b) => new Date(a.checkInDate) - new Date(b.checkInDate));
                applyFilterAndDisplay();
            }, (error) => console.error("Error al obtener las reservas:", error));
        }

        function displayReservations(reservations) {
            reservationsList.innerHTML = '';
            noReservationsMessage.classList.toggle('hidden', reservations.length > 0);

            reservations.forEach(res => {
                const card = document.createElement('div');
                card.className = 'card p-5';
                
                const checkIn = new Date(res.checkInDate + 'T12:00:00');
                const checkOut = new Date(res.checkOutDate + 'T09:00:00');
                const dateFormat = { year: 'numeric', month: 'short', day: 'numeric' };

                const optionsHtml = [
                    res.promo && { icon: 'fa-tag', text: 'Promo' },
                    res.sheets && { icon: 'fa-clone', text: 'Sábanas' },
                    res.car && { icon: 'fa-car', text: 'Auto' },
                    res.extraBeds && { icon: 'fa-bed', text: 'Cama extra' },
                    res.lateCheckout && { icon: 'fa-clock', text: 'Late Check-out' }
                ].filter(Boolean).map(opt => `<span class="inline-flex items-center bg-blue-100 text-blue-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full"><i class="fas ${opt.icon} mr-1.5"></i>${opt.text}</span>`).join('');

                card.innerHTML = `
                    <div class="flex flex-col md:flex-row justify-between gap-4">
                        <div class="flex-grow">
                            <div class="flex items-center flex-wrap mb-2">
                                <span class="font-bold text-2xl text-blue-700 mr-3">${res.clientName}</span>
                                <span class="text-gray-600 mr-3"><i class="fas fa-users mr-1"></i>${res.personCount || ''}</span>
                                <span class="bg-gray-200 text-gray-800 text-sm font-semibold px-3 py-1 rounded-full">${res.duplex}</span>
                            </div>
                            <div class="text-gray-600 font-medium text-sm mb-3">
                                <i class="fas fa-calendar-alt text-green-500 mr-2"></i> ${checkIn.toLocaleDateString('es-AR', dateFormat)}
                                <i class="fas fa-arrow-right mx-2"></i>
                                <i class="fas fa-calendar-alt text-red-500 mr-2"></i> ${checkOut.toLocaleDateString('es-AR', dateFormat)}
                                <span class="font-bold ml-4">(${res.totalNights} ${res.totalNights === 1 ? 'noche' : 'noches'})</span>
                            </div>
                            <div class="mb-3">${optionsHtml || '<span class="text-xs text-gray-400">Sin opciones adicionales</span>'}</div>
                            ${res.otherNotes ? `<p class="text-sm text-gray-500 mt-2 bg-gray-50 p-2 rounded-md"><i class="fas fa-info-circle mr-2"></i>${res.otherNotes}</p>` : ''}
                        </div>
                        <div class="flex flex-col items-end justify-between self-start pt-2">
                            <div class="text-right mb-4 md:mb-0">
                                <div class="text-xs text-gray-500">Total Estadía</div>
                                <div class="font-bold text-xl">$${(res.totalStayCost || 0).toLocaleString('es-AR')}</div>
                                ${res.extrasCost > 0 ? `<div class="text-xs text-gray-500 mt-1">+ $${res.extrasCost.toLocaleString('es-AR')} Extras</div>` : ''}
                            </div>
                             <div class="flex items-center space-x-2 mt-4">
                                <button data-id="${res.id}" class="btn edit-btn bg-yellow-500 text-white font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-yellow-600">
                                    <i class="fas fa-pencil-alt"></i>
                                </button>
                                <button data-id="${res.id}" class="btn delete-btn bg-red-500 text-white font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-red-600">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                reservationsList.appendChild(card);
            });
            
            document.querySelectorAll('.delete-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const id = e.currentTarget.getAttribute('data-id');
                    showConfirmationModal('¿Estás seguro de que quieres eliminar esta reserva?', async () => {
                        const docRef = doc(db, `/artifacts/${appId}/users/${auth.currentUser.uid}/reservations`, id);
                        try { await deleteDoc(docRef); } catch (error) { console.error("Error al eliminar:", error); }
                    });
                });
            });

            document.querySelectorAll('.edit-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const id = e.currentTarget.getAttribute('data-id');
                    populateFormForEdit(id);
                });
            });
        }
    </script>
</body>
</html>

